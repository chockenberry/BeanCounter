#import "CPTCalendarFormatter.h"

/**	@brief A number formatter that converts calendar intervals to dates.
 *  Useful for formatting labels on an axis. The numerical
 *  scale of the plot space will be used to increment the specified calendar unit. 
 *  For example, with a <code>majorIntervalLength</code> of 1 and a <code>referenceCalendarUnit</code> of
 *  NSMonthCalendarUnit, successive months will be displayed on the axis.
 *  Axis labels can be directl generated by setting a CPTCalendarFormatter as the @link CPTAxis::labelFormatter labelFormatter @endlink
 *	and/or @link CPTAxis::minorTickLabelFormatter minorTickLabelFormatter @endlink.
 **/
@implementation CPTCalendarFormatter

/**	@property dateFormatter
 *  @brief The date formatter used to generate strings from date calculations.
 **/
@synthesize dateFormatter;

/**	@property referenceDate
 *  @brief Date from which time intervals are computed.
 *  If <code>nil</code>, the standard reference date (1 January 2001, GMT) is used.
 **/
@synthesize referenceDate;

/**	@property referenceCalendar
 *  @brief Calendar which is used for date calculations.
 *  If <code>nil</code>, the current calendar is used.
 **/
@synthesize referenceCalendar;

/**	@property referenceCalendarUnit
 *  @brief Calendar unit which is incremented in the date calculation.
 *  If <code>0</code>, the date is .
 **/
@synthesize referenceCalendarUnit;

#pragma mark -
#pragma mark Init/Dealloc

/**	@brief Initializes new instance with a default date formatter.
 *	The default formatter uses <code>NSDateFormatterMediumStyle</code> for dates and times.
 *	@return The new instance.
 **/
-(id)init
{
	NSDateFormatter *newDateFormatter = [[NSDateFormatter alloc] init];

	newDateFormatter.dateStyle = NSDateFormatterMediumStyle;
	newDateFormatter.timeStyle = NSDateFormatterMediumStyle;

	self = [self initWithDateFormatter:newDateFormatter];
	[newDateFormatter release];

	return self;
}

/**	@brief Initializes new instance with the date formatter passed.
 *	@param aDateFormatter The date formatter.
 *	@return The new instance.
 **/
-(id)initWithDateFormatter:(NSDateFormatter *)aDateFormatter
{
	if ( (self = [super init]) ) {
		dateFormatter = [aDateFormatter retain];
		referenceDate = nil;
		referenceCalendar = nil;
		referenceCalendarUnit = 0;
	}
	return self;
}

-(void)dealloc
{
	[referenceCalendar release];
	[referenceDate release];
	[dateFormatter release];
	[super dealloc];
}

#pragma mark -
#pragma mark NSCoding methods

-(void)encodeWithCoder:(NSCoder *)coder
{
	[super encodeWithCoder:coder];

	[coder encodeObject:self.dateFormatter forKey:@"CPTCalendarFormatter.dateFormatter"];
	[coder encodeObject:self.referenceDate forKey:@"CPTCalendarFormatter.referenceDate"];
	[coder encodeObject:self.referenceCalendar forKey:@"CPTCalendarFormatter.referenceCalendar"];
	[coder encodeInteger:self.referenceCalendarUnit forKey:@"CPTCalendarFormatter.referenceCalendarUnit"];
}

-(id)initWithCoder:(NSCoder *)coder
{
	if ( (self = [super initWithCoder:coder]) ) {
		dateFormatter = [[coder decodeObjectForKey:@"CPTCalendarFormatter.dateFormatter"] retain];
		referenceDate = [[coder decodeObjectForKey:@"CPTCalendarFormatter.referenceDate"] copy];
		referenceCalendar = [[coder decodeObjectForKey:@"CPTCalendarFormatter.referenceCalendar"] copy];
		referenceCalendarUnit = [coder decodeIntegerForKey:@"CPTCalendarFormatter.referenceCalendarUnit"];
	}
	return self;
}

#pragma mark -
#pragma mark NSCopying

-(id)copyWithZone:(NSZone *)zone
{
	CPTCalendarFormatter *newFormatter = [[CPTCalendarFormatter allocWithZone:zone] init];

	if ( newFormatter ) {
		newFormatter->dateFormatter = [self->dateFormatter copyWithZone:zone];
		newFormatter->referenceDate = [self->referenceDate copyWithZone:zone];
		newFormatter->referenceCalendar = [self->referenceCalendar copyWithZone:zone];
		newFormatter->referenceCalendarUnit = self->referenceCalendarUnit;
	}
	return newFormatter;
}

#pragma mark -
#pragma mark Formatting

///	@name Formatting
///	@{

/**
 *	@brief Converts decimal number for the time into a date string.
 *  Uses the date formatter to do the conversion. Conversions are relative to the
 *  reference date, unless it is <code>nil</code>, in which case the standard reference date
 *  of 1 January 2001, GMT is used.
 *	@param coordinateValue The time value.
 *	@return The date string.
 **/
-(NSString *)stringForObjectValue:(NSDecimalNumber *)coordinateValue
{
	NSInteger componentIncrement = [coordinateValue integerValue];
	
	NSDateComponents *dateComponents = [[[NSDateComponents alloc] init] autorelease];
	switch (referenceCalendarUnit) {
		case NSCalendarUnitEra:
			dateComponents.era = componentIncrement;
			break;
		case NSCalendarUnitYear:
			dateComponents.year = componentIncrement;
			break;
		case NSCalendarUnitMonth:
			dateComponents.month = componentIncrement;
			break;
		case NSCalendarUnitDay:
			dateComponents.day = componentIncrement;
			break;
		case NSCalendarUnitHour:
			dateComponents.hour = componentIncrement;
			break;
		case NSCalendarUnitMinute:
			dateComponents.minute = componentIncrement;
			break;
		case NSCalendarUnitSecond:
			dateComponents.second = componentIncrement;
			break;
		case NSCalendarUnitWeekday:
			dateComponents.weekday = componentIncrement;
			break;
		case NSCalendarUnitWeekdayOrdinal:
			dateComponents.weekdayOrdinal = componentIncrement;
			break;
#if MAC_OS_X_VERSION_10_6 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_4_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED
		case NSCalendarUnitQuarter:
			dateComponents.quarter = componentIncrement;
			break;
#endif
#if 0
#if MAC_OS_X_VERSION_10_7 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_5_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED
		case NSWeekOfMonthCalendarUnit:
			dateComponents.weekOfMonth = componentIncrement;
			break;
		case NSWeekOfYearCalendarUnit:
			dateComponents.weekOfYear = componentIncrement;
			break;
		case NSYearForWeekOfYearCalendarUnit:
			dateComponents.yearForWeekOfYear = componentIncrement;
			break;
#endif
#endif
		default:
			break;
	}
	
	NSDate *startDate = [NSDate dateWithTimeIntervalSinceReferenceDate:0];
	if (self.referenceDate) {
		startDate = self.referenceDate;
	}
	
	NSCalendar *calendar = [NSCalendar currentCalendar];
	if (self.referenceCalendar) {
		calendar = self.referenceCalendar;
	}
	
	NSDate *computedDate = [calendar dateByAddingComponents:dateComponents toDate:startDate options:0];	
	
	NSString *string = [self.dateFormatter stringFromDate:computedDate];
	return string;
}

///	@}

@end
